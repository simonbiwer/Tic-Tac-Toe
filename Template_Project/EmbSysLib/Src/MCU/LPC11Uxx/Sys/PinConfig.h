//*******************************************************************
/*!
\file   PinConfig.h
\author Thomas Breuer
\date   08.10.2014

\brief Pin mapping of controller peripherals
*/

//*******************************************************************
#ifndef _HW_PIN_CONFIG_H
#define _HW_PIN_CONFIG_H

//*******************************************************************
/*!
\class cHwPinConfig

\brief Port pin configuration

*/
class cHwPinConfig
{
  public:
    //---------------------------------------------------------------
    /*! Pin mode configuration
    */
    typedef enum
    {
      NOPUPD = 0x00, //!< No pull up/pull down
      PD     = 0x01, //!< Pull down resistor enable
      PU     = 0x02, //!< Pull up resistor enable
      RM     = 0x03, //!< Repeater mode
      //NOD    = 0x00, //!< No open drain
      AD     = 0x10, //!< AD mode enable
      OD     = 0x80  //!< Open drain enable
    } MODE;

    //---------------------------------------------------------------
    typedef enum
    {
      AD0 = 1,
      AD1,
      AD2,
      AD3,
      AD4,
      AD5,
      AD6,
      AD7,
      CT16B0_CAP0,
      CT16B0_CAP1,
      CT16B0_MAT0,
      CT16B0_MAT1,
      CT16B0_MAT2,
      CT16B1_CAP0,
      CT16B1_CAP1,
      CT16B1_MAT0,
      CT16B1_MAT1,
      CT32B0_CAP0,
      CT32B0_CAP1,
      CT32B0_MAT0,
      CT32B0_MAT1,
      CT32B0_MAT2,
      CT32B0_MAT3,
      CT32B1_CAP0,
      CT32B1_CAP1,
      CT32B1_MAT0,
      CT32B1_MAT1,
      CT32B1_MAT2,
      CT32B1_MAT3,
      CTS,
      DCD,
      DSR,
      DTR,
      MISO0,
      MISO1,
      MOSI0,
      MOSI1,
      RI,
      RTS,
      RXD,
      SCK0,
      SCK1,
      SCL,
      SCLK,
      SDA,
      SSEL0,
      SSEL1,
      TXD,
      USB_CONNECT,
      USB_FTOGGLE,
      USB_VBUS,
    } Function;

    //---------------------------------------------------------------
    /*! Pin function mapping
        
        Maps an alternate function to a port pin
    */
    typedef enum
    {
      AD0_P0_11         = (AD0        <<16)|(0<<12)|(11<<4)|(2<<0),  //!< .
      AD1_P0_12         = (AD1        <<16)|(0<<12)|(12<<4)|(2<<0),  //!< .
      AD2_P0_13         = (AD2        <<16)|(0<<12)|(13<<4)|(2<<0),  //!< .
      AD3_P0_14         = (AD3        <<16)|(0<<12)|(14<<4)|(2<<0),  //!< .
   // AD4_P0_15         = (AD4        <<16)|(0<<12)|(15<<4)|(2<<0),  //!< Don't use, its SWDIO
      AD5_P0_16         = (AD5        <<16)|(0<<12)|(16<<4)|(1<<0),  //!< .
      AD6_P0_22         = (AD6        <<16)|(0<<12)|(22<<4)|(1<<0),  //!< .
      AD7_P0_23         = (AD7        <<16)|(0<<12)|(23<<4)|(1<<0),  //!< .
      CT16B0_CAP0_P0_2  = (CT16B0_CAP0<<16)|(0<<12)|( 2<<4)|(2<<0),  //!< .
      CT16B0_CAP0_P1_16 = (CT16B0_CAP0<<16)|(1<<12)|(16<<4)|(2<<0),  //!< .
      CT16B0_CAP1_P1_17 = (CT16B0_CAP1<<16)|(1<<12)|(17<<4)|(1<<0),  //!< .
      CT16B0_MAT0_P0_8  = (CT16B0_MAT0<<16)|(0<<12)|( 8<<4)|(2<<0),  //!< .
      CT16B0_MAT0_P1_13 = (CT16B0_MAT0<<16)|(1<<12)|(13<<4)|(2<<0),  //!< .
      CT16B0_MAT1_P0_9  = (CT16B0_MAT1<<16)|(0<<12)|( 9<<4)|(2<<0),  //!< .
      CT16B0_MAT1_P1_14 = (CT16B0_MAT1<<16)|(1<<12)|(14<<4)|(2<<0),  //!< .
   // CT16B0_MAT2_P0_10 = (CT16B0_MAT2<<16)|(0<<12)|(10<<4)|(3<<0),  //!< Don't use, its SWCLK
      CT16B0_MAT2_P1_15 = (CT16B0_MAT2<<16)|(1<<12)|(15<<4)|(2<<0),  //!< .
      CT16B1_CAP0_P0_20 = (CT16B1_CAP0<<16)|(0<<12)|(20<<4)|(1<<0),  //!< .
      CT16B1_CAP1_P1_18 = (CT16B1_CAP1<<16)|(1<<12)|(18<<4)|(1<<0),  //!< .
      CT16B1_MAT0_P0_21 = (CT16B1_MAT0<<16)|(0<<12)|(21<<4)|(1<<0),  //!< .
      CT16B1_MAT1_P0_22 = (CT16B1_MAT1<<16)|(0<<12)|(22<<4)|(2<<0),  //!< .
      CT16B1_MAT1_P1_23 = (CT16B1_MAT1<<16)|(1<<12)|(23<<4)|(1<<0),  //!< .
      CT32B0_CAP0_P0_17 = (CT32B0_CAP0<<16)|(0<<12)|(17<<4)|(2<<0),  //!< .
      CT32B0_CAP0_P1_28 = (CT32B0_CAP0<<16)|(1<<12)|(28<<4)|(1<<0),  //!< .
      CT32B0_CAP1_P1_29 = (CT32B0_CAP1<<16)|(1<<12)|(29<<4)|(2<<0),  //!< .
      CT32B0_MAT0_P0_18 = (CT32B0_MAT0<<16)|(0<<12)|(18<<4)|(2<<0),  //!< .
      CT32B0_MAT0_P1_24 = (CT32B0_MAT0<<16)|(1<<12)|(24<<4)|(1<<0),  //!< .
      CT32B0_MAT1_P0_19 = (CT32B0_MAT1<<16)|(0<<12)|(19<<4)|(2<<0),  //!< .
      CT32B0_MAT1_P1_25 = (CT32B0_MAT1<<16)|(1<<12)|(25<<4)|(1<<0),  //!< .
      CT32B0_MAT2_P0_1  = (CT32B0_MAT2<<16)|(0<<12)|( 1<<4)|(2<<0),  //!< .
      CT32B0_MAT2_P1_26 = (CT32B0_MAT2<<16)|(1<<12)|(26<<4)|(1<<0),  //!< .
      CT32B0_MAT3_P0_11 = (CT32B0_MAT3<<16)|(0<<12)|(11<<4)|(3<<0),  //!< .
      CT32B0_MAT3_P1_27 = (CT32B0_MAT3<<16)|(1<<12)|(27<<4)|(1<<0),  //!< .
      CT32B1_CAP0_P0_12 = (CT32B1_CAP0<<16)|(0<<12)|(12<<4)|(3<<0),  //!< .
      CT32B1_CAP0_P1_4  = (CT32B1_CAP0<<16)|(1<<12)|( 4<<4)|(1<<0),  //!< .
      CT32B1_CAP1_P1_5  = (CT32B1_CAP1<<16)|(1<<12)|( 5<<4)|(1<<0),  //!< .
      CT32B1_MAT0_P0_13 = (CT32B1_MAT0<<16)|(0<<12)|(13<<4)|(3<<0),  //!< .
      CT32B1_MAT1_P0_14 = (CT32B1_MAT1<<16)|(0<<12)|(14<<4)|(3<<0),  //!< .
      CT32B1_MAT1_P1_0  = (CT32B1_MAT1<<16)|(1<<12)|( 0<<4)|(1<<0),  //!< .
      CT32B1_MAT1_P1_1  = (CT32B1_MAT1<<16)|(1<<12)|( 1<<4)|(1<<0),  //!< .
   // CT32B1_MAT2_P0_15 = (CT32B1_MAT2<<16)|(0<<12)|(15<<4)|(3<<0),  //!< Don't use, its SWDIO
      CT32B1_MAT2_P1_2  = (CT32B1_MAT2<<16)|(1<<12)|( 2<<4)|(1<<0),  //!< .
      CT32B1_MAT3_P0_16 = (CT32B1_MAT3<<16)|(0<<12)|(16<<4)|(2<<0),  //!< .
      CT32B1_MAT3_P1_3  = (CT32B1_MAT3<<16)|(1<<12)|( 3<<4)|(1<<0),  //!< .
      CTS_P0_7          = (CTS        <<16)|(0<<12)|( 7<<4)|(1<<0),  //!< .
      DCD_P1_15         = (DCD        <<16)|(1<<12)|(15<<4)|(1<<0),  //!< .
      DCD_P1_21         = (DCD        <<16)|(1<<12)|(21<<4)|(1<<0),  //!< .
      DSR_P1_14         = (DSR        <<16)|(1<<12)|(14<<4)|(1<<0),  //!< .
      DSR_P1_20         = (DSR        <<16)|(1<<12)|(20<<4)|(1<<0),  //!< .
      DTR_P1_13         = (DTR        <<16)|(1<<12)|(13<<4)|(1<<0),  //!< .
      DTR_P1_19         = (DTR        <<16)|(1<<12)|(19<<4)|(1<<0),  //!< .
      MISO0_P0_8        = (MISO0      <<16)|(0<<12)|( 8<<4)|(1<<0),  //!< .
      MISO1_P0_22       = (MISO1      <<16)|(0<<12)|(22<<4)|(3<<0),  //!< .
      MISO1_P1_21       = (MISO1      <<16)|(1<<12)|(21<<4)|(2<<0),  //!< .
      MOSI0_P0_9        = (MOSI0      <<16)|(0<<12)|( 9<<4)|(1<<0),  //!< .
      MOSI1_P0_21       = (MOSI1      <<16)|(0<<12)|(21<<4)|(2<<0),  //!< .
      MOSI1_P1_22       = (MOSI1      <<16)|(1<<12)|(22<<4)|(2<<0),  //!< .
      RI_P1_16          = (RI         <<16)|(1<<12)|(16<<4)|(1<<0),  //!< .
      RI_P1_22          = (RI         <<16)|(1<<12)|(22<<4)|(1<<0),  //!< .
      RTS_P0_17         = (RTS        <<16)|(0<<12)|(17<<4)|(1<<0),  //!< .
      RXD_P0_18         = (RXD        <<16)|(0<<12)|(18<<4)|(1<<0),  //!< .
      RXD_P1_14         = (RXD        <<16)|(1<<12)|(14<<4)|(3<<0),  //!< .
      RXD_P1_17         = (RXD        <<16)|(1<<12)|(17<<4)|(2<<0),  //!< .
      RXD_P1_26         = (RXD        <<16)|(1<<12)|(26<<4)|(2<<0),  //!< .
      SCK0_P0_6         = (SCK0       <<16)|(0<<12)|( 6<<4)|(2<<0),  //!< .
      SCK0_P0_10        = (SCK0       <<16)|(0<<12)|(10<<4)|(2<<0),  //!< .
      SCK0_P1_29        = (SCK0       <<16)|(1<<12)|(29<<4)|(1<<0),  //!< .
      SCK1_P1_15        = (SCK1       <<16)|(1<<12)|(15<<4)|(3<<0),  //!< .
      SCK1_P1_20        = (SCK1       <<16)|(1<<12)|(20<<4)|(2<<0),  //!< .
      SCL_P0_4          = (SCL        <<16)|(0<<12)|( 4<<4)|(1<<0),  //!< .
      SCLK_P0_17        = (SCLK       <<16)|(0<<12)|(17<<4)|(3<<0),  //!< .
      SCLK_P1_28        = (SCLK       <<16)|(1<<12)|(28<<4)|(2<<0),  //!< .
      SDA_P0_5          = (SDA        <<16)|(0<<12)|( 5<<4)|(1<<0),  //!< .
      SSEL0_P0_2        = (SSEL0      <<16)|(0<<12)|( 2<<4)|(1<<0),  //!< .
      SSEL1_P1_19       = (SSEL1      <<16)|(1<<12)|(19<<4)|(2<<0),  //!< .
      SSEL1_P1_23       = (SSEL1      <<16)|(1<<12)|(23<<4)|(2<<0),  //!< .
      TXD_P0_19         = (TXD        <<16)|(0<<12)|(19<<4)|(1<<0),  //!< .
      TXD_P1_13         = (TXD        <<16)|(1<<12)|(13<<4)|(3<<0),  //!< .
      TXD_P1_18         = (TXD        <<16)|(1<<12)|(18<<4)|(2<<0),  //!< .
      TXD_P1_27         = (TXD        <<16)|(1<<12)|(27<<4)|(2<<0),  //!< .
      USB_CONNECT_P0_6  = (USB_CONNECT<<16)|(0<<12)|( 6<<4)|(1<<0),  //!< .
      USB_FTOGGLE_P0_1  = (USB_FTOGGLE<<16)|(0<<12)|( 1<<4)|(3<<0),  //!< .
      USB_VBUS_P0_3     = (USB_VBUS   <<16)|(0<<12)|( 3<<4)|(1<<0),  //!< .
      END_OF_TABLE = 0
    } MAP;

  public:
    //---------------------------------------------------------------
    /*! Set PINSEL, PINMODE and PINMODE_OD
        This function uses \b table[]
    */
    static void set( Function func,    //!< Alternate function
                     DWORD    mode = 0 //!< PINMODE (optional) 
                   );

  public:
    //---------------------------------------------------------------
    /*! This table defines how a alternate function is mapped to the 
        port pins. It must be filled within the application software
    */
    static MAP table[];

}; //cHwPinConfig

#endif
