<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bin\STM32L1xx\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bin\STM32L1xx\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Apr 04 11:22:36 2022
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[50]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_IRQHandler</a> from lib.o(i.ADC1_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[50]">AES_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[51]">COMP_ACQ_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[32]">COMP_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel1_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel2_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel3_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel4_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel5_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[34]">LCD_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[45]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[1f]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[52]">SystemInit</a> from lib.o(i.SystemInit) referenced from startup_stm32l1xx_mdp.o(.text)
 <LI><a href="#[1e]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[36]">TIM10_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[37]">TIM11_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from lib.o(i.TIM2_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from lib.o(i.TIM3_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from lib.o(i.TIM4_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from lib.o(i.TIM5_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[47]">TIM6_IRQHandler</a> from lib.o(i.TIM6_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[48]">TIM7_IRQHandler</a> from lib.o(i.TIM7_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[35]">TIM9_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from lib.o(i.USART1_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from lib.o(i.USART2_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from lib.o(i.USART3_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[46]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[2f]">USB_HP_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[30]">USB_LP_IRQHandler</a> from lib.o(i.USB_LP_IRQHandler) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32l1xx_mdp.o(.text) referenced from startup_stm32l1xx_mdp.o(RESET)
 <LI><a href="#[5b]">cDevDigital::get()</a> from lib.o(i._ZN11cDevDigital3getEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[5a]">cDevDigital::set(bool)</a> from lib.o(i._ZN11cDevDigital3setEb) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[5c]">cDevDigital::getEvent()</a> from lib.o(i._ZN11cDevDigital8getEventEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[74]">cHwSPImaster::Device::transceive(unsigned char*, unsigned short)</a> from lib.o(i._ZN12cHwSPImaster6Device10transceiveEPht) referenced from lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
 <LI><a href="#[5d]">cHwSPImaster_N::transceiveByte(unsigned char)</a> from lib.o(i._ZN14cHwSPImaster_N14transceiveByteEh) referenced from lib.o(.constdata__ZTV14cHwSPImaster_N)
 <LI><a href="#[5f]">cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)</a> from lib.o(i._ZN15cDevDisplayChar6printfEhhhPKcz) referenced from lib.o(.constdata__ZTV15cDevDisplayChar)
 <LI><a href="#[5e]">cDevDisplayChar::refresh()</a> from lib.o(i._ZN15cDevDisplayChar7refreshEv) referenced from lib.o(.constdata__ZTV15cDevDisplayChar)
 <LI><a href="#[62]">cHwDisp_DIP204spi::gotoTextPos(unsigned char, unsigned char)</a> from disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi11gotoTextPosEhh) referenced from disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
 <LI><a href="#[60]">cHwDisp_DIP204spi::clear()</a> from disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi5clearEv) referenced from disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
 <LI><a href="#[63]">cHwDisp_DIP204spi::putChar(char)</a> from disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi7putCharEc) referenced from disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
 <LI><a href="#[61]">cHwDisp_DIP204spi::refresh()</a> from disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi7refreshEv) referenced from disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
 <LI><a href="#[64]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[64]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
 <LI><a href="#[65]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[65]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
 <LI><a href="#[66]">cDevControlEncoderRotaryKnob::getIncrement()</a> from lib.o(i._ZN28cDevControlEncoderRotaryKnob12getIncrementEv) referenced from lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
 <LI><a href="#[75]">cList::Item::update()</a> from lib.o(i._ZN5cList4Item6updateEv) referenced from lib.o(.constdata__ZTVN5cList4ItemE)
 <LI><a href="#[69]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[69]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6a]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[6a]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[68]">cHwADC::enable(unsigned char, unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEhh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[68]">cHwADC::enable(unsigned char, unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEhh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[67]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[67]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[79]">cHwPort::Pin::clr()</a> from lib.o(i._ZN7cHwPort3Pin3clrEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[7a]">cHwPort::Pin::get()</a> from lib.o(i._ZN7cHwPort3Pin3getEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[78]">cHwPort::Pin::set(bool)</a> from lib.o(i._ZN7cHwPort3Pin3setEb) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[77]">cHwPort::Pin::set()</a> from lib.o(i._ZN7cHwPort3Pin3setEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[76]">cHwPort::Pin::setMode(cHwPort::Mode)</a> from lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[6c]">cHwADC_0::startCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_07startChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6d]">cHwADC_0::configCh(unsigned char, unsigned char)</a> from lib.o(i._ZN8cHwADC_08configChEhh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6b]">cHwADC_0::getResult()</a> from lib.o(i._ZN8cHwADC_09getResultEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6e]">cHwDAC_0::set(unsigned short, unsigned char)</a> from lib.o(i._ZN8cHwDAC_03setEth) referenced from lib.o(.constdata__ZTV8cHwDAC_0)
 <LI><a href="#[6f]">cHwDAC_0::enable(unsigned char)</a> from lib.o(i._ZN8cHwDAC_06enableEh) referenced from lib.o(.constdata__ZTV8cHwDAC_0)
 <LI><a href="#[59]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[59]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[58]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[58]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[70]">cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[72]">cHwPort_N::clr(unsigned)</a> from lib.o(i._ZN9cHwPort_N3clrEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[73]">cHwPort_N::get()</a> from lib.o(i._ZN9cHwPort_N3getEv) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[71]">cHwPort_N::set(unsigned)</a> from lib.o(i._ZN9cHwPort_N3setEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from lib.o(.constdata__ZTV10cHwDisplay)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV11cDevDisplay)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV12cHwSPImaster)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV6cHwDAC)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV7cHwPort)
 <LI><a href="#[57]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[7c]">__main</a> from __main.o(!!!main) referenced from startup_stm32l1xx_mdp.o(.text)
 <LI><a href="#[7b]">__sti___8_main_cpp_sys</a> from main.o(i.__sti___8_main_cpp_sys) referenced from main.o(.init_array)
 <LI><a href="#[56]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[55]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[54]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[82]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[cf]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[84]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[86]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[89]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[130]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[131]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[8a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[90]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[92]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[98]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[132]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[9a]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9e]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a0]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[133]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ad]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[134]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[136]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[138]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[13c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[140]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[141]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[142]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[145]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[146]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[147]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[148]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[aa]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ac]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ae]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[153]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_mdp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l1xx_mdp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e8]"></a>save_context</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtoscontext.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e9]"></a>load_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtoscontext.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[b5]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[b8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[b9]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)
</UL>

<P><STRONG><a name="[bc]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[155]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[b4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b6]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[156]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[bf]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a3]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c1]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c5]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[83]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[ba]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[bb]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[54]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[93]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[cc]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[97]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[cd]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[99]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[85]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c8]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bd]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[158]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[159]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[15c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[db]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9f]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a1]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ca]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d0]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ab]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[dc]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[d9]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d3]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[dd]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[de]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e2]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[11e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[d4]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[e3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[e5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e6]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d5]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2e]"></a>ADC1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib.o(i.ADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SystemInit</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, lib.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM7_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USB_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_LP_IRQHandler &rArr; cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_mdp.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN10cHwDisplayC2Ehh))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::cHwDisp_DIP204spi(cHwSPImaster::Device&)
</UL>

<P><STRONG><a name="[ea]"></a>cHwTimer_N::isr()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[15e]"></a>cHwTimer_N::cHwTimer_N__sub_object(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj), UNUSED)

<P><STRONG><a name="[5b]"></a>cDevDigital::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::get() &rArr; cHwPort::Pin::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[5a]"></a>cDevDigital::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN11cDevDigital3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[5c]"></a>cDevDigital::getEvent()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib.o(i._ZN11cDevDigital8getEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::getEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[f9]"></a>cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::setMode(cHwPort::Mode)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[15f]"></a>cDevDigital::cDevDigital__sub_object(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb), UNUSED)

<P><STRONG><a name="[105]"></a>cDevDisplay::cDevDisplay__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDisplayC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>

<P><STRONG><a name="[fb]"></a>cHwPinConfig::set(cHwPinConfig::Function, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lib.o(i._ZN12cHwPinConfig3setENS_8FunctionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cHwPinConfig::set(cHwPinConfig::Function, unsigned) &rArr; cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::enable(unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::configCh(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[fc]"></a>cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 52 bytes, lib.o(i._ZN12cHwPinConfig3setEP12GPIO_TypeDefhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>

<P><STRONG><a name="[74]"></a>cHwSPImaster::Device::transceive(unsigned char*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lib.o(i._ZN12cHwSPImaster6Device10transceiveEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwSPImaster::Device::transceive(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
</UL>
<P><STRONG><a name="[100]"></a>cHwSPImaster::Device::stop()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::stop() &rArr; cHwPort::Pin::set()
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::transceive(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[ff]"></a>cHwSPImaster::Device::start()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::transceive(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[101]"></a>cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char) &rArr; cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[160]"></a>cHwSPImaster::Device::Device__sub_object(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth), UNUSED)

<P><STRONG><a name="[103]"></a>cHwSPImaster::cHwSPImaster__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImasterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
</UL>

<P><STRONG><a name="[5d]"></a>cHwSPImaster_N::transceiveByte(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwSPImaster_N14transceiveByteEh))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwSPImaster_N)
</UL>
<P><STRONG><a name="[102]"></a>cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, lib.o(i._ZN14cHwSPImaster_NC1ENS_6SPI_IDEN12cHwSPImaster4MODEENS1_11ClockPolPhaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned) &rArr; cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_N::transceiveByte(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::cHwSPImaster__sub_object()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[161]"></a>cHwSPImaster_N::cHwSPImaster_N__sub_object(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN14cHwSPImaster_NC1ENS_6SPI_IDEN12cHwSPImaster4MODEENS1_11ClockPolPhaE), UNUSED)

<P><STRONG><a name="[5f]"></a>cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, lib.o(i._ZN15cDevDisplayChar6printfEhhhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV15cDevDisplayChar)
</UL>
<P><STRONG><a name="[5e]"></a>cDevDisplayChar::refresh()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN15cDevDisplayChar7refreshEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDisplayChar::refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV15cDevDisplayChar)
</UL>
<P><STRONG><a name="[104]"></a>cDevDisplayChar::cDevDisplayChar(cHwDisplay&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[162]"></a>cDevDisplayChar::cDevDisplayChar__sub_object(cHwDisplay&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay), UNUSED)

<P><STRONG><a name="[62]"></a>cHwDisp_DIP204spi::gotoTextPos(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi11gotoTextPosEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwDisp_DIP204spi::gotoTextPos(unsigned char, unsigned char) &rArr; cHwDisp_DIP204spi::writeCmd(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeCmd(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
</UL>
<P><STRONG><a name="[107]"></a>cHwDisp_DIP204spi::init()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwDisp_DIP204spi::init() &rArr; cHwDisp_DIP204spi::writeCmd(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::cHwDisp_DIP204spi(cHwSPImaster::Device&)
</UL>

<P><STRONG><a name="[60]"></a>cHwDisp_DIP204spi::clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwDisp_DIP204spi::clear() &rArr; cHwDisp_DIP204spi::writeCmd(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeCmd(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
</UL>
<P><STRONG><a name="[63]"></a>cHwDisp_DIP204spi::putChar(char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi7putCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwDisp_DIP204spi::putChar(char) &rArr; cHwDisp_DIP204spi::writeDat(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeDat(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
</UL>
<P><STRONG><a name="[61]"></a>cHwDisp_DIP204spi::refresh()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi7refreshEv))
<BR>[Address Reference Count : 1]<UL><LI> disp_dip204spi.o(.constdata__ZTV17cHwDisp_DIP204spi)
</UL>
<P><STRONG><a name="[109]"></a>cHwDisp_DIP204spi::waitBusy()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi8waitBusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeDat(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::writeCmd(unsigned char)
</UL>

<P><STRONG><a name="[106]"></a>cHwDisp_DIP204spi::writeCmd(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi8writeCmdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwDisp_DIP204spi::writeCmd(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::clear()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::init()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::gotoTextPos(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>cHwDisp_DIP204spi::writeDat(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spi8writeDatEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwDisp_DIP204spi::writeDat(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::putChar(char)
</UL>

<P><STRONG><a name="[10a]"></a>cHwDisp_DIP204spi::cHwDisp_DIP204spi(cHwSPImaster::Device&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spiC1ERN12cHwSPImaster6DeviceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_DIP204spi::cHwDisp_DIP204spi(cHwSPImaster::Device&) &rArr; cHwDisp_DIP204spi::init() &rArr; cHwDisp_DIP204spi::writeCmd(unsigned char) &rArr; cHwDisp_DIP204spi::waitBusy()
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::init()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[163]"></a>cHwDisp_DIP204spi::cHwDisp_DIP204spi__sub_object(cHwSPImaster::Device&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, disp_dip204spi.o(i._ZN17cHwDisp_DIP204spiC1ERN12cHwSPImaster6DeviceE), UNUSED)

<P><STRONG><a name="[10c]"></a>cDevControlEncoder::get()</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lib.o(i._ZN18cDevControlEncoder3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cDevControlEncoder::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>cDevControlEncoder::update()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevControlEncoder6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cDevControlEncoder::update() &rArr; cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
</UL>
<P><STRONG><a name="[65]"></a>cDevControlEncoder::getCtrl()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevControlEncoder7getCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoder::getCtrl()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
</UL>
<P><STRONG><a name="[10f]"></a>cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib.o(i._ZN18cDevControlEncoderC2EP11cDevDigitalP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderRotaryKnob::cDevControlEncoderRotaryKnob(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[66]"></a>cDevControlEncoderRotaryKnob::getIncrement()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lib.o(i._ZN28cDevControlEncoderRotaryKnob12getIncrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoderRotaryKnob::getIncrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV28cDevControlEncoderRotaryKnob)
</UL>
<P><STRONG><a name="[112]"></a>cDevControlEncoderRotaryKnob::cDevControlEncoderRotaryKnob(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lib.o(i._ZN28cDevControlEncoderRotaryKnobC1EP11cDevDigitalS1_S1_P8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cDevControlEncoderRotaryKnob::cDevControlEncoderRotaryKnob(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*) &rArr; cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[164]"></a>cDevControlEncoderRotaryKnob::cDevControlEncoderRotaryKnob__sub_object(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN28cDevControlEncoderRotaryKnobC1EP11cDevDigitalS1_S1_P8cHwTimer), UNUSED)

<P><STRONG><a name="[113]"></a>cList::add(cList::Item*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib.o(i._ZN5cList3addEPNS_4ItemE))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::add(cList::Item*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>

<P><STRONG><a name="[75]"></a>cList::Item::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN5cList4Item6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN5cList4ItemE)
</UL>
<P><STRONG><a name="[110]"></a>cList::Item::Item(cList*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[165]"></a>cList::Item::Item__sub_object(cList*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_), UNUSED)

<P><STRONG><a name="[11a]"></a>cList::updateAll()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib.o(i._ZN5cList9updateAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cList::updateAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::isrHandler()
</UL>

<P><STRONG><a name="[ee]"></a>cList::cList()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[166]"></a>cList::cList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev), UNUSED)

<P><STRONG><a name="[69]"></a>cHwADC::get(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3getEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::get(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6a]"></a>cHwADC::isr()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::isr()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[68]"></a>cHwADC::enable(unsigned char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lib.o(i._ZN6cHwADC6enableEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwADC::enable(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[67]"></a>cHwADC::update()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[114]"></a>cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADCC2EhP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[119]"></a>cHwDAC::cHwDAC__sub_object(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN6cHwDACC2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
</UL>

<P><STRONG><a name="[79]"></a>cHwPort::Pin::clr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[7a]"></a>cHwPort::Pin::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[78]"></a>cHwPort::Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[77]"></a>cHwPort::Pin::set()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[76]"></a>cHwPort::Pin::setMode(cHwPort::Mode)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[fa]"></a>cHwPort::Pin::Pin(cHwPort&, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
</UL>

<P><STRONG><a name="[167]"></a>cHwPort::Pin::Pin__sub_object(cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h), UNUSED)

<P><STRONG><a name="[116]"></a>cSystem::disableWatchdog()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15disableWatchdogEv))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[fe]"></a>cSystem::enableInterrupt()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15enableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::transceive(unsigned char*, unsigned short)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[fd]"></a>cSystem::disableInterrupt()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem16disableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::transceive(unsigned char*, unsigned short)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[115]"></a>cSystem::cSystem(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cSystem::cSystem(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableWatchdog()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[168]"></a>cSystem::cSystem__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh), UNUSED)

<P><STRONG><a name="[6c]"></a>cHwADC_0::startCh(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_07startChEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6d]"></a>cHwADC_0::configCh(unsigned char, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_08configChEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cHwADC_0::configCh(unsigned char, unsigned char) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned) &rArr; cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6b]"></a>cHwADC_0::getResult()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_09getResultEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[117]"></a>cHwADC_0::cHwADC_0(cHwTimer*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwADC_0::cHwADC_0(cHwTimer*) &rArr; cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[169]"></a>cHwADC_0::cHwADC_0__sub_object(cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer), UNUSED)

<P><STRONG><a name="[6e]"></a>cHwDAC_0::set(unsigned short, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_03setEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwDAC_0::set(unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwDAC_0)
</UL>
<P><STRONG><a name="[6f]"></a>cHwDAC_0::enable(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwDAC_06enableEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwDAC_0::enable(unsigned char) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned) &rArr; cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwDAC_0)
</UL>
<P><STRONG><a name="[118]"></a>cHwDAC_0::cHwDAC_0()</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lib.o(i._ZN8cHwDAC_0C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cHwDAC_0::cHwDAC_0()
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC::cHwDAC__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[16a]"></a>cHwDAC_0::cHwDAC_0__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, lib.o(i._ZN8cHwDAC_0C1Ev), UNUSED)

<P><STRONG><a name="[59]"></a>cHwTimer::isrHandler()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwTimer10isrHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwTimer::isrHandler() &rArr; cList::updateAll()
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::updateAll()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[58]"></a>cHwTimer::add(cList::Item*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwTimer::add(cList::Item*)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[ec]"></a>cHwUSB_0::isr()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lib.o(i._ZN8cHwUSB_03isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EPconfig::clrCTR_TX()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EPconfig::clrCTR_RX()
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>cHwUSB_0::EPconfig::clrCTR_RX()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_08EPconfig9clrCTR_RXEv))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[11c]"></a>cHwUSB_0::EPconfig::clrCTR_TX()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_08EPconfig9clrCTR_TXEv))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[70]"></a>cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[72]"></a>cHwPort_N::clr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3clrEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[73]"></a>cHwPort_N::get()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3getEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[71]"></a>cHwPort_N::set(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3setEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[11d]"></a>cHwPort_N::cHwPort_N(cHwPort_N::PortId)</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[16b]"></a>cHwPort_N::cHwPort_N__sub_object(cHwPort_N::PortId)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE), UNUSED)

<P><STRONG><a name="[eb]"></a>cHwUART_N::isr()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib.o(i._ZN9cHwUART_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwUART_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[57]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 8]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV7cHwPort)
<LI> lib.o(.constdata__ZTV10cHwDisplay)
<LI> lib.o(.constdata__ZTV11cDevDisplay)
<LI> lib.o(.constdata__ZTV6cHwDAC)
<LI> lib.o(.constdata__ZTV12cHwSPImaster)
</UL>
<P><STRONG><a name="[ce]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[af]"></a>main</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::refresh()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a8]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[56]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[10e]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEElsERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[11f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[122]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16c]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[123]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[121]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[120]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[129]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[124]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[127]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16d]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[128]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[12c]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[12a]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[126]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[125]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[12b]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[87]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__sti___8_main_cpp_sys</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __sti___8_main_cpp_sys &rArr; cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned) &rArr; cHwPinConfig::set(GPIO_TypeDef*, unsigned char, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderRotaryKnob::cDevControlEncoderRotaryKnob(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_DIP204spi::cHwDisp_DIP204spi(cHwSPImaster::Device&)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_N::cHwSPImaster_N(cHwSPImaster_N::SPI_ID, cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[ef]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i._Z16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[55]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
